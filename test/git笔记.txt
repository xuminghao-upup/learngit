pwd 显示所在目录
git init 把这个目录变成git可以管理的仓库
git add 把文件添加到仓库
git commit 把文件提交到仓库  -m 后续写提交说明
git log 查看修改日志
git reset --hard HEAD^ 版本回退  HEAD~100(第几个版本)
git reset --hard 提交ID   版本回到此提交id版本
git reflog 记录每一次命令
git status 查看工作区的状态
git add把文件添加进去，实际上就是把文件修改添加到暂存区
git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
git commit只负责把暂存区的修改提交了
git checkout -- file可以丢弃工作区的修改：
一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
git reset HEAD 也可以把暂存区的修改回退到工作区。
git remote add origin git@server-name:path/repo-name.git 
$ git remote add origin git@github.com:michaelliao/learngit.git
关联一个远程库
git push -u origin master第一次推送master分支的所有内容
之后git push origin master推送最新修改；
$ git clone git@github.com:michaelliao/gitskills.git克隆库
git checkout -b 分支名   创建分支
git branch命令会列出所有分支，当前分支前面会标一个*号。
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
$ git merge --no-ff -m "merge with no-ff" dev
禁用fast forword模式
git stash 隐藏工作现场（bug时）
git stash list 查看现场
git stash apply 恢复现场  但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
git stash pop 恢复现场  恢复的同时把stash内容也删了：
用git cherry-pick，我们就不需要在dev分支上手动再把修bug的过程重复一遍
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；

在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit ID>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

如果要丢弃一个没有合并过的分支，通过git branch -D <name>强行删除。

从本地推送分支 git push origin (分支名)
如果推送失败，先用git pull抓取远程的新提交；（推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：）

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。










